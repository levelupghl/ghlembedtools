{"version":3,"file":"queryParams.js","sources":["../../src/js/lib/debounce.ts","../../src/js/lib/utils.ts","../../src/js/lib/supports.ts","../../src/js/queryParams.ts"],"sourcesContent":["export function debounce(func: () => void, wait: number): () => void {\n  let timeout: number | undefined\n  return function executedFunction(): void {\n    const later = (): void => {\n      clearTimeout(timeout)\n      func()\n    }\n    clearTimeout(timeout)\n    timeout = window.setTimeout(later, wait)\n  }\n}\n","export function addQueryParam(\n  url: string,\n  paramName: string,\n  paramValue: string\n): string {\n  try {\n    // Create a URL object from the given string\n    const urlObj = new URL(url)\n\n    // Set the query parameter\n    urlObj.searchParams.set(paramName, paramValue)\n\n    // Return the updated URL string\n    return urlObj.toString()\n  } catch (error) {\n    // Handle potential errors, such as invalid URL format\n    console.error(\"Provided string is not a valid URL:\", error)\n    // Return the original url\n    return url\n  }\n}\n\nexport function getQueryParams(\n  url_or_search: string | null = null\n): Record<string, string> {\n  let search: string\n  if (url_or_search) {\n    search = url_or_search.startsWith(\"?\")\n      ? url_or_search\n      : new URL(url_or_search).search\n  } else {\n    search = window.location.search || new URL(window.location.href).search\n  }\n  const params = new URLSearchParams(search)\n  const queryParams: Record<string, string> = {}\n  params.forEach((value, key) => {\n    queryParams[key] = value\n  })\n  return queryParams\n}\n\n// Merge and array of objects into a single object\nexport function mergeObjects(\n  objects: Record<string, any>[]\n): Record<string, any> {\n  const result: Record<string, any> = {}\n  // Iterate through each object in the array\n  objects.forEach((obj) => {\n    // Iterate through each key in the current object\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        // Assign/overwrite the property in the result object\n        result[key] = obj[key]\n      }\n    }\n  })\n  return result\n}\n","export function hasLocalStorage() {\n  try {\n    const t = \"__storage_test__\"\n    const store = window.localStorage\n    store.setItem(t, t)\n    const v = store.getItem(t)\n    store.removeItem(t)\n    return t === v\n  } catch {\n    return false\n  }\n}\n","import { debounce } from \"./lib/debounce\"\nimport { getQueryParams, mergeObjects } from \"./lib/utils\"\nimport { hasLocalStorage } from \"./lib/supports\"\n\nconst DEBUG = true\nconst iframeSelector = \"iframe:not([data-embed-tools-init])\"\nconst iframesList: Array<IFrame> = []\nconst search_cache = window.location.search\nconst SUPPORTS_LOCALSTORAGE = hasLocalStorage()\n// GHL iframe urls to match; see form_embed line 838\nconst GHL_EMBED_SRCS = [\"/form\", \"/survey\", \"/booking\", \"/group\"]\nlet send_queue: Array<object> = []\n\nconst embedTools = {\n  debug: DEBUG,\n  sendQueryParams,\n}\n\nexport interface CustomWindow extends Window {\n  levelup: {\n    debug: boolean\n    sendQueryParams: any\n  }\n}\ndeclare let window: CustomWindow\n\ninterface IFrame extends HTMLIFrameElement {\n  dataset: {\n    embedToolsInit?: string\n    embedToolsLocationId?: string\n    src?: string\n    layoutIframeId?: string\n  }\n}\n\nexport function sendQueryParams(params: object, iframe: IFrame | null = null) {\n  _sendQueryParams(params, iframe)\n  send_queue.push(params)\n}\n\nfunction _sendQueryParams(params: object, iframe: IFrame | null = null) {\n  if (iframe) {\n    postQueryParams(iframe, params)\n  } else {\n    iframesList.forEach((iframe) => {\n      postQueryParams(iframe, params)\n    })\n  }\n}\n\n\nfunction postQueryParams(iframe: IFrame, params: object) {\n  const url = new URL(document.location.href)\n  const locationId = iframe.dataset.embedToolsLocationId\n  const cached_session = getCachedSession(locationId)\n  const referrer = cached_session ? cached_session.referrer : document.referrer\n  const id = iframe.dataset?.layoutIframeId || iframe.id\n  iframe.contentWindow?.postMessage(\n    [\"query-params\", params, url.toString(), referrer, id],\n    \"*\"\n  )\n}\n\n// From form_embed.js [line 512]\nfunction getCachedSession(locationId: string | undefined) {\n  if (!SUPPORTS_LOCALSTORAGE || !locationId) {\n    return\n  }\n  const key = `v3_first_session_event_${locationId}`\n  try {\n    const value = localStorage.getItem(key)\n    if (!value) {\n      return null\n    }\n    const data = JSON.parse(value)\n    return new Date().getTime() > data.expiry\n      ? (localStorage.removeItem(key), null)\n      : data.value\n  } catch (err) {\n    return null\n  }\n}\n\nfunction getIframeByEventSource(\n  source: MessageEventSource | null\n): IFrame | void {\n  if (!source) return\n  const iframes = Array.from(document.getElementsByTagName(\"iframe\"))\n  for (let item of iframes) {\n    if (item.contentWindow === source) {\n      return item\n    }\n  }\n}\n\n// Listen for fetch-query-params messages\nfunction processIframeMessage(evt: MessageEvent) {\n  if (embedTools.debug) {\n    console.log(\"[EMBEDTOOLS] received message:\", evt, evt.data)\n  }\n  const data = evt.data\n  if (typeof data === \"object\" && data[0] === \"fetch-query-params\") {\n    const iframe = getIframeByEventSource(evt.source)\n    if (iframe) {\n      // Cache location ID on the iframe; needed for later postMessage\n      iframe.dataset.embedToolsLocationId = data[2]\n    }\n    // Use the current location.search or default to cache if the search params happened to have been removed from url\n    const search =\n      window.location.search.length > 1 ? window.location.search : search_cache\n    let params = getQueryParams(search)\n\n    // Add any params that were previously queued up\n    if (send_queue && send_queue.length) {\n      params = mergeObjects([params, ...send_queue])\n    }\n\n    // Set a timeout to allow time for form_embed.js to send query params, then\n    // send our params that may contain custom params from window.levelup.sendQueryParams\n    setTimeout(() => {\n      _sendQueryParams(params, iframe || null)\n    }, 10)\n  }\n}\n\nfunction setupIframesAndObserve(document: Document): void {\n  const filterIframes = (iframe: IFrame): boolean => {\n    if (iframe.dataset.embedToolsInit) {\n      return false\n    }\n    // Some WP plugins like lazysizes removes iframe.src until the iframe is visible.\n    // Since GHL's form_embed.js only filters on src, we need support both src and dataset.src.\n    const src = iframe.src || iframe.dataset.src || \"\"\n    return GHL_EMBED_SRCS.some((r) => src.includes(r))\n  }\n\n  const initIframes = (): void => {\n    Array.from(document.querySelectorAll<IFrame>(iframeSelector))\n      .filter(filterIframes)\n      .forEach((iframe) => {\n        iframe.dataset.embedToolsInit = \"true\"\n        iframesList.push(iframe)\n      })\n  }\n\n  window.addEventListener(\"message\", processIframeMessage)\n\n  // Start by initializing any iframes already present\n  initIframes()\n\n  // Save any queued sendQueryParams\n  if (window.levelup?.sendQueryParams?.queue?.length) {\n    send_queue = window.levelup?.sendQueryParams?.queue\n  }\n\n  // Rerun initFrames anytime the DOM changes, but debounced every 50ms\n  const observer = new MutationObserver(debounce(initIframes, 50))\n  observer.observe(document.body, {\n    attributes: false,\n    childList: true,\n    subtree: true,\n  })\n}\n\nsetupIframesAndObserve(window.document)\n\n// Export sendQueryParams to window.levelup.sendQueryParams\nif (!window.levelup) {\n  window.levelup = embedTools\n} else {\n  window.levelup.debug ??= embedTools.debug\n  window.levelup.sendQueryParams ??= embedTools.sendQueryParams\n}\n"],"names":["iframe","_a","_b","document","_c","_d"],"mappings":"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"}